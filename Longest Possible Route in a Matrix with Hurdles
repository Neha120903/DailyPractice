// { Driver Code Starts
import java.io.*;
import java.util.*;


class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);
        
        return a;
    }
    
    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
    
    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}


class IntMatrix
{
    public static int[][] input(BufferedReader br, int n, int m) throws IOException
    {
        int[][] mat = new int[n][];
        
        for(int i = 0; i < n; i++)
        {
            String[] s = br.readLine().trim().split(" ");
            mat[i] = new int[s.length];
            for(int j = 0; j < s.length; j++)
                mat[i][j] = Integer.parseInt(s[j]);
        }
        
        return mat;
    }
    
    public static void print(int[][] m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }
    
    public static void print(ArrayList<ArrayList<Integer>> m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int[] a = IntArray.input(br, 2);
            
            
            int[] b = IntArray.input(br, 4);
            
            
            int[][] mat = IntMatrix.input(br, a[0], a[1]);
            
            Solution obj = new Solution();
            int res = obj.longestPath(mat,a[0],a[1],b[0],b[1],b[2],b[3]);
            
            System.out.println(res);
            
        }
    }
}
// } Driver Code Ends

class Solution {
    
    static int dx[] = {1, 0, -1, 0};
    static int dy[] = {0, 1, 0, -1};
    
    private static int rec(int x, int y, int mat[][], boolean vis[][], int n, int m, int xd,  int yd)
    {
        if(x==xd && y==yd)
        {
            return 0;
        }
        
        vis[x][y] = true;
        
        int max_dist = -100000;
        
        for(int i=0; i<4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            
            if(nx>=0 && ny>=0 && nx<n && ny<m && vis[nx][ny] == false && mat[nx][ny]!=0)
            {
                max_dist = Math.max(max_dist, rec(nx, ny, mat, vis, n, m, xd, yd));
            }
        }
        
        vis[x][y] = false;
        
        return max_dist + 1;
        
        
    }
    
    
    public static int longestPath(int[][] mat,int n,int m,int xs,int ys,int xd,int yd) {
        
        boolean vis[][] = new boolean[n][m];
        
        if(mat[xs][ys]==0) return -1;
        if(mat[xd][yd]==0) return -1;
        
        
        
        int ans = rec(xs, ys, mat, vis, n, m, xd, yd);
        
        return ans<0 ? -1 : ans;
        
    }
}
        
