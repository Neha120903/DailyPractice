// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;


class GFG {
	public static void main(String[] args) throws IOException
	{
	        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t =
            Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            double a[] = new double[(int)(n)];
            double getAnswer[] = new double[(int)(n)];
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = Double.parseDouble(inputLine[i]);
            }
            
            Solution obj = new Solution();
            obj.nullPoints(n, a, getAnswer); 
            
            StringBuilder output = new StringBuilder();
            for(int i=0;i<n-1;i++)
                output.append(String.format("%.2f", getAnswer[i])+" ");
                
            System.out.println(output);
            
        }
	}
}


// } Driver Code Ends


//User function Template for Java

class Solution {
    
    public void nullPoints(int n, double magnets[], double getAnswer[])
    {
        // Your code goes here 
        for(int i= 0; i<n-1 ; i++)
        {
            getAnswer[i] = neutralPoint(magnets[i] , magnets[i+1] , magnets, n);
        }
    }
     
     
    public double neutralPoint(double low, double high , double[] magnets , int n)
    {
        
        while(low<=high)
        {
            double mid= (low+high)/2;
            double totalForce =0;
            for(int i=0 ;i<n ;i++)
            {
                totalForce+=1/(mid-magnets[i]);
            }
            
            if(Math.abs(totalForce) < 0.000001)
            {
                return mid;
            }
            
            else if(totalForce < 0)
            {
                high = mid;
            }
            else
            {
                low = mid;
            }
        }
        return low;
    }
    
}


